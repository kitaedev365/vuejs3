package com.example.lms.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.example.lms.dto.CourseInfoDTO;
import com.example.lms.entity.CourseInfo;
import com.example.lms.entity.Courses;
import com.example.lms.repository.CourseInfoRepository;
import com.example.lms.repository.CoursesRepository;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CourseInfoService {

    private final CourseInfoRepository courseInfoRepository;
    private final CoursesRepository coursesRepository;
    
    public List<CourseInfo> getAllCourseInfos() {
        return courseInfoRepository.findAll();
    }

    public CourseInfo getCourseInfoById(Long id) {
        return courseInfoRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("CourseInfo not found with id: " + id));
    }

    public CourseInfo saveCourseInfo(CourseInfo courseInfo) {
        return courseInfoRepository.save(courseInfo);
    }

    public List<CourseInfo> saveCourseInfos(List<CourseInfo> courseInfos) {
        return courseInfoRepository.saveAll(courseInfos);
    }

    public CourseInfo updateCourseInfo(Long id, CourseInfo updatedCourseInfo) {
        CourseInfo courseInfo = getCourseInfoById(id);
        courseInfo.setTopic(updatedCourseInfo.getTopic());
        courseInfo.setDetails(updatedCourseInfo.getDetails());
        courseInfo.setDurationHours(updatedCourseInfo.getDurationHours());
        return courseInfoRepository.save(courseInfo);
    }

    public void deleteCourseInfo(Long id) {
        courseInfoRepository.deleteById(id);
    }

    public void deleteCourseInfosByCourseId(Long courseId) {
        List<CourseInfoDTO> courseInfos = getCourseInfosByCourseId(courseId);
        
        courseInfoRepository.deleteAllByCourseId(courseInfos);
    }
    
    // 특정 Course의 CourseInfo 목록 조회
    public List<CourseInfoDTO> getCourseInfosByCourseId(Long courseId) {
        List<CourseInfo> courseInfos = courseInfoRepository.findByCourseId(courseId);
        return courseInfos.stream().map(courseInfo -> CourseInfoDTO.builder()
                .id(courseInfo.getId())
                .courseId(courseInfo.getCourse().getId())
                .topic(courseInfo.getTopic())
                .details(courseInfo.getDetails())
                .mediafile(courseInfo.getMediafile())
                .durationHours(courseInfo.getDurationHours())
                .build())
                .collect(Collectors.toList());
    }

    // 특정 Course의 CourseInfo 입력/수정
    @Transactional
    public void saveOrUpdateCourseInfos(Long courseId, List<CourseInfoDTO> courseInfoDTOs) {
        Courses course = coursesRepository.findById(courseId)
                .orElseThrow(() -> new EntityNotFoundException("Course not found"));

        // 기존 데이터 삭제
        courseInfoRepository.deleteByCourseId(courseId);

        // 새 데이터 저장
        List<CourseInfo> courseInfos = courseInfoDTOs.stream().map(dto -> {
            CourseInfo courseInfo = new CourseInfo();
            courseInfo.setCourse(course);
            courseInfo.setTopic(dto.getTopic());
            courseInfo.setDetails(dto.getDetails());
            courseInfo.setMediafile(dto.getMediafile());
            courseInfo.setDurationHours(dto.getDurationHours());
            return courseInfo;
        }).collect(Collectors.toList());

        courseInfoRepository.saveAll(courseInfos);
    }
}