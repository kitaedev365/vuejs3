package com.example.lms.service;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.lms.entity.Users;
import com.example.lms.repository.UsersRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UsersService implements UserDetailsService {

    private final UsersRepository usersRepository;
    private final PasswordEncoder passwordEncoder; // BCryptPasswordEncoder 주입

    // 회원 목록 조회
    public List<Users> getAllUsers() {
        return usersRepository.findAll();
    }

    // 회원 정보 조회 by ID
    public Optional<Users> getUserById(Long id) {
        return usersRepository.findById(id);
    }

    // 로그인 기능 (username과 password 체크)
    public Optional<Users> login(String username, String password) {
        return usersRepository.findByUsername(username)
                .filter(user -> passwordEncoder.matches(password, user.getPassword())); // 비밀번호 비교는 matches() 메서드를 사용
    }

    // 아이디 중복 확인
    public boolean isUsernameTaken(String username) {
        return usersRepository.existsByUsername(username);
    }

    // 이메일 중복 확인
    public boolean isEmailTaken(String email) {
        return usersRepository.existsByEmail(email);
    }

    // 회원 가입
    public Users registerUser(Users user) {
        user.setPassword(passwordEncoder.encode(user.getPassword())); // 회원가입 시 비밀번호 암호화
        return usersRepository.save(user);
    }

    // 회원 정보 수정
    @Transactional
    public Optional<Users> updateUser(Long id, Users updatedUser) {
        return usersRepository.findById(id).map(user -> {
            user.setUsername(updatedUser.getUsername());
            user.setPassword(passwordEncoder.encode(updatedUser.getPassword())); // 비밀번호 암호화 후 저장
            user.setEmail(updatedUser.getEmail());
            user.setRole(updatedUser.getRole());
            return user;
        });
    }

    // 회원 탈퇴
    public void deleteUser(Long id) {
        usersRepository.deleteById(id);
    }

    // Spring Security의 UserDetailsService를 구현
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Users user = usersRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));

        // 비밀번호 비교를 여기서 할 필요 없이, DB에서 올바른 비밀번호와 역할을 설정해 반환
        return new Users(
                user.getUsername(),
                user.getPassword(), // 비밀번호는 암호화되어 있어야 함
                Collections.singletonList(new SimpleGrantedAuthority(user.getRole())) // 권한 설정
        );
    }
}