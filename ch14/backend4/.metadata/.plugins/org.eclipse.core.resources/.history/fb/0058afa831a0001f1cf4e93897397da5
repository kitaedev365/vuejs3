package com.example.sns.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.sns.domain.PostDto;
import com.example.sns.entity.Post;
import com.example.sns.entity.User;
import com.example.sns.service.PostService;

@RestController
@RequestMapping("/api/posts")
@CrossOrigin(origins = "http://localhost:5173/**")
public class PostController {
	
	private static final Logger log = LoggerFactory.getLogger(PostController.class);
	
    private final PostService postService;

    public PostController(PostService postService) {
        this.postService = postService;
    }

    // 게시물 전체 조회
    @GetMapping
    public ResponseEntity<List<PostDto>> getAllPosts() {
        return ResponseEntity.ok(postService.getAllPosts());
    }

    // 특정 사용자의 게시물 조회
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Post>> getPostsByUser(@PathVariable("userId") Long userId) {
        return ResponseEntity.ok(postService.getPostsByUser(userId));
    }

    // 게시물 ID로 조회
    @GetMapping("/{id}")
    public ResponseEntity<Post> getPostById(@PathVariable("id") Long id) {
        return postService.getPostById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // 게시물 생성
    @PostMapping("/new")
    public ResponseEntity<Post> createPost(
        @RequestParam("content") String content,
        @RequestParam(value = "mediaFile", required = false) MultipartFile mediaFile,
        @RequestParam("userId") Long userId) {
    	log.info("Content: "+content);
        Post post = new Post();
        User user = new User();
        user.setId(userId);
        post.setUser(user);
        post.setContent(content);

        if (mediaFile != null && !mediaFile.isEmpty()) {
            // 파일 저장
            String mediaUrl = saveFile(mediaFile);
            post.setMediaFile(mediaUrl);  

            // 파일의 타입에 따라 MediaType 설정
            String contentType = mediaFile.getContentType();
            if (contentType != null) {
                if (contentType.startsWith("image")) {
                    post.setMediaType(Post.MediaType.IMAGE);
                } else if (contentType.startsWith("video")) {
                    post.setMediaType(Post.MediaType.VIDEO);
                } else {
                    post.setMediaType(Post.MediaType.TEXT); // 기본값
                }
            }
        } else {
            post.setMediaType(Post.MediaType.TEXT); // 파일이 없으면 기본값 설정
        }

        Post createdPost = postService.createPost(post);
        return ResponseEntity.ok(createdPost);
    }

    // 게시물 수정
    @PutMapping("/{id}")
    public ResponseEntity<Post> updatePost(@PathVariable("id") Long id, @RequestBody Post post) {
        try {
            Post updatedPost = postService.updatePost(id, post);
            return ResponseEntity.ok(updatedPost);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.notFound().build();
        }
    }

    // 게시물 삭제
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePost(@PathVariable("id") Long id) {
        postService.deletePost(id);
        return ResponseEntity.noContent().build();
    }
    
    private String saveFile(MultipartFile file) {
        try {
            String uploadDir = "uploads/"; // 파일 저장 경로
            String originalFilename = file.getOriginalFilename();
            
            // 파일명과 타임스탬프 결합
            String savedFilename = System.currentTimeMillis() + "_" + originalFilename;
            String filePath = uploadDir + savedFilename;

            // 디렉토리가 없으면 생성
            File dir = new File(uploadDir);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            // 파일 저장
            file.transferTo(new File(filePath));

            // 파일명만 반환
            return savedFilename;
        } catch (IOException e) {
            throw new RuntimeException("Failed to store file", e);
        }
    }
    }
}