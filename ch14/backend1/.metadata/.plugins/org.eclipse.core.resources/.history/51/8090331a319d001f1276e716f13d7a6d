package com.example.shop.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.shop.domain.CartDto;
import com.example.shop.service.CartService;

@RestController
@RequestMapping("/api/carts")
public class CartController {

    @Autowired
    private CartService cartService;

    // 장바구니에 상품 추가
    @PostMapping("/add")
    public ResponseEntity<?> addToCart(@RequestBody CartDto cartDto) {
        try {
            // CartDto에서 User와 Product 정보가 제대로 포함되었는지 확인
            if (cartDto.getUser() == null || cartDto.getProducts() == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("사용자 정보나 상품 정보가 누락되었습니다.");
            }

            cartService.addToCart(cartDto);  // 장바구니에 상품 추가 서비스 호출
            return ResponseEntity.ok("상품이 장바구니에 추가되었습니다.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("장바구니에 상품을 추가하는데 실패했습니다.");
        }
    }

    // 로그인한 사용자의 장바구니 목록 조회
    @GetMapping("/user/{username}")
    public ResponseEntity<List<CartDto>> getUserCart(@PathVariable("username") String username) {
        try {
            List<CartDto> cartList = cartService.getUserCart(username);
            return ResponseEntity.ok(cartList);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    // 장바구니 항목 삭제
    @DeleteMapping("/{cartId}")
    public ResponseEntity<String> deleteFromCart(@PathVariable("cartId") Long cartId) {
        try {
            cartService.deleteFromCart(cartId);
            return ResponseEntity.ok("Product removed from cart successfully.");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Failed to remove product from cart: " + e.getMessage());
        }
    }
}
